{
    "files": [
      {
        "content": "package com.example.demo.model;\n\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport lombok.Data;\n\n@Entity\n@Data\npublic class AddressEntity {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    private String street;\n    private String city;\n    private String state;\n    private String zipCode;\n    private String country;\n}"
      },
      {
        "content": "package com.example.demo.dao;\n\nimport com.example.demo.model.AddressEntity;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface AddressRepository extends JpaRepository<AddressEntity, Long> {\n}"
      },
      {
        "content": "package com.example.demo.service;\n\nimport com.example.demo.model.AddressEntity;\n\nimport java.util.List;\nimport java.util.Optional;\n\npublic interface AddressService {\n    List<AddressEntity> getAllAddresses();\n    Optional<AddressEntity> getAddressById(Long id);\n    AddressEntity createAddress(AddressEntity address);\n    AddressEntity updateAddress(Long id, AddressEntity addressDetails);\n    void deleteAddress(Long id);\n}"
      },
      {
        "content": "package com.example.demo.service.impl;\n\nimport com.example.demo.model.AddressEntity;\nimport com.example.demo.dao.AddressRepository;\nimport com.example.demo.service.AddressService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class AddressServiceImpl implements AddressService {\n\n    @Autowired\n    private AddressRepository addressRepository;\n\n    @Override\n    public List<AddressEntity> getAllAddresses() {\n        return addressRepository.findAll();\n    }\n\n    @Override\n    public Optional<AddressEntity> getAddressById(Long id) {\n        return addressRepository.findById(id);\n    }\n\n    @Override\n    public AddressEntity createAddress(AddressEntity address) {\n        return addressRepository.save(address);\n    }\n\n    @Override\n    public AddressEntity updateAddress(Long id, AddressEntity addressDetails) {\n        Optional<AddressEntity> address = addressRepository.findById(id);\n        if (address.isPresent()) {\n            AddressEntity existingAddress = address.get();\n            existingAddress.setStreet(addressDetails.getStreet());\n            existingAddress.setCity(addressDetails.getCity());\n            existingAddress.setState(addressDetails.getState());\n            existingAddress.setZipCode(addressDetails.getZipCode());\n            existingAddress.setCountry(addressDetails.getCountry());\n            return addressRepository.save(existingAddress);\n        }\n        return null;\n    }\n\n    @Override\n    public void deleteAddress(Long id) {\n        addressRepository.deleteById(id);\n    }\n}"
      },
      {
        "content": "package com.example.demo.rest;\n\nimport com.example.demo.model.AddressEntity;\nimport com.example.demo.service.AddressService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@RestController\n@RequestMapping(\"/v1/api/addresses\")\npublic class AddressController {\n\n    @Autowired\n    private AddressService addressService;\n\n    @GetMapping\n    public List<AddressEntity> getAllAddresses() {\n        return addressService.getAllAddresses();\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<AddressEntity> getAddressById(@PathVariable Long id) {\n        Optional<AddressEntity> address = addressService.getAddressById(id);\n        return address.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());\n    }\n\n    @PostMapping\n    public AddressEntity createAddress(@RequestBody AddressEntity address) {\n        return addressService.createAddress(address);\n    }\n\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<AddressEntity> updateAddress(@PathVariable Long id, @RequestBody AddressEntity addressDetails) {\n        AddressEntity updatedAddress = addressService.updateAddress(id, addressDetails);\n        if (updatedAddress != null) {\n            return ResponseEntity.ok(updatedAddress);\n        }\n        return ResponseEntity.notFound().build();\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<Void> deleteAddress(@PathVariable Long id) {\n        addressService.deleteAddress(id);\n        return ResponseEntity.ok().build();\n    }\n}"
      }
    ]
}